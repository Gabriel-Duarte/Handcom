@page "/topicindex"

@using Handcom.Web.Model.Request
@using Handcom.Web.Model.Responses
@using Handcom.Web.Services.Interface

@inject DialogService DialogService
@inject ITopicsService _topicsService

<h1 class="text-center">Tópicos</h1>
<br />
<div class="d-flex flex-column gap-3">
    <RadzenButton Icon="add" Text="Adicionar Tópico" Click="CreateTopic" />
    <RadzenDataGrid @ref="grid"
                    IsLoading=@isLoading
                    Count="@count"
                    Data="@topicList"
                    LoadData="@LoadData"
                    AllowSorting="false"
                    AllowFiltering="false"
                    AllowPaging="true"
                    PageSize="4"
                    PagerHorizontalAlign="HorizontalAlign.Center"
                    TItem="TopicsResponse"
                    ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn TItem="TopicsResponse" Property="Name" Title="Tópicos" Width="160px" />
            <RadzenDataGridColumn TItem="TopicsResponse" Property="Name" Title="Editar" Width="30px">
                <Template Context="data">
                    <RadzenButton Icon="edit" Click="@(() => OnEditTopic(data))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code {

    int count;
    bool isLoading = false;
    List<TopicsResponse> topicList = new();
    RadzenDataGrid<TopicsResponse> grid;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetTopics(new TopicsRequest { Page = 1, Size = 4, Sort = "", Direction = 1 });
    }

    async Task GetTopics(TopicsRequest request)
    {
        isLoading = true;
        var result = await _topicsService.GetListTopics(request);
        isLoading = false;

        if (result.IsSuccess)
        {
            count = result.Data.TotalElements;
            topicList = result.Data.Content;
            StateHasChanged();
        }
    }

    async Task LoadData(LoadDataArgs args)
    {
        int currentPage = ((int)args.Skip / (int)args.Top) + 1;

        TopicsRequest topicRequest = new TopicsRequest
            {
                Page = currentPage,
                Size = (int)args.Top,
                Sort = args.OrderBy,
            };

        await GetTopics(topicRequest);
    }

    public async Task OnEditTopic(TopicsResponse topic)
    {
        var parameter = new Dictionary<string, object>() {
                { "topic", topic }
            };

        var dialogResult = await DialogService.OpenAsync<EditTopic>("", parameter,
                                                   new DialogOptions()
                                                       {
                                                           Width = "25%",
                                                           CloseDialogOnEsc = ModalState.CloseDialogOnEsc,
                                                           Draggable = ModalState.Draggable,
                                                           Resizable = ModalState.Resizable,
                                                           Height = "35%",
                                                           ShowClose = ModalState.ShowClose
                                                       });
        if (dialogResult is not null)
        {
            await GetTopics(new TopicsRequest { Page = 1, Size = 4, Sort = "", Direction = 1 });
        }

    }

    public async Task CreateTopic()
    {
        var dialogResult = await DialogService.OpenAsync<CreateTopic>("", null,
                                                             new DialogOptions()
                                                                 {
                                                                     Width = "25%",
                                                                     CloseDialogOnEsc = ModalState.CloseDialogOnEsc,
                                                                     Draggable = ModalState.Draggable,
                                                                     Resizable = ModalState.Resizable,
                                                                     Height = "35%",
                                                                     ShowClose = ModalState.ShowClose
                                                                 });
        if (dialogResult is not null)
        {
            await GetTopics(new TopicsRequest { Page = 1, Size = 4, Sort = "", Direction = 1 });
        }
    }
}
