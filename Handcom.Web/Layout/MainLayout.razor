@using Handcom.Web.Configuration
@using Handcom.Web.Model.Extensions
@using Handcom.Web.Model.Request
@using Handcom.Web.Pagination.Base
@using Handcom.Web.Services.Interface

@inject ITopicsService _topicsService
@inject ThemeState ThemeState
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inherits LayoutComponentBase
@inject ILocalStorageService _localStorage;

<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />

@if (Theme != "default.css")
{
    <link href="_content/Radzen.Blazor/css/@(Theme)" rel="stylesheet" />

    <style>
        .rightalign {
            text-align: right;
        }
    </style>
}

<RadzenHeader>
    <ChildContent>
        <AuthorizeView>
            <Authorized>
                <div class="row justify-content-start align-items-center">
                    <div class="col-6 d-flex align-items-center">
                        <RadzenSidebarToggle Click="@SidebarToggle0Click">
                        </RadzenSidebarToggle>
                        <RadzenImage Path="Images/GDCS.jpg" Style="width: 10%;" />
                    </div>
                    <div class="col-6 d-flex align-items-center justify-content-end">
                        <RadzenProfileMenu Style="position: relative; z-index: 1000;">
                            <ChildContent>
                                <RadzenProfileMenuItem Text="Minha Conta" Icon="account_circle" Path="updateuserprofile" />
                                <RadzenProfileMenuItem Text="Topic" Icon="star_rate" Path="topicindex" />
                                <RadzenProfileMenuItem Text="Sair" Icon="power_settings_new" Path="logout" />
                                
                            </ChildContent>
                            <Template>
                                @if (user.UserImage is null)
                                {
                                    <RadzenImage Path="Images/Mash.jpg" style="border-radius: 16px; height: 32px; width: 32px"/>
                                }
                                else
                                {
                                    <RadzenImage Path="@user.UserImage" style="border-radius: 16px; height: 32px; width: 32px" />
                                }

                            </Template>
                        </RadzenProfileMenu>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
    </ChildContent>
</RadzenHeader>
<RadzenBody @ref="body0">
    <ChildContent>
        <RadzenContentContainer Name="main">
            @Body
        </RadzenContentContainer>
    </ChildContent>
</RadzenBody>
<AuthorizeView>
    <Authorized>
        <RadzenSidebar @ref="sidebar0" Style="top: 52px; bottom: 0px; width: 250px; transform: translateX(0px);">
            <ChildContent>
                <RadzenTextBox @bind-Value="searchText" Placeholder="Pesquisar" Style="margin: 10px; width: 90%" @oninput="@OnSearchTextChanged" />
                <RadzenPanelMenu style="height: 100%">
                    <ChildContent>
                        @foreach (var menuItem in filteredMenuItems)
                        {
                            <RadzenPanelMenuItem Icon="@(menuItem.Icon)" Path="@(menuItem.Path)" Text="@(menuItem.Text)" />
                        }
                    </ChildContent>
                </RadzenPanelMenu>
            </ChildContent>
        </RadzenSidebar>
    </Authorized>
</AuthorizeView>
@code {

    protected UserToken user = new UserToken();
    protected RadzenBody body0;
    protected RadzenSidebar sidebar0;
    string searchText = "";

    List<MenuItem> filteredMenuItems = new List<MenuItem>();
    string Theme
    {
        get
        {
            return $"{ThemeState.CurrentTheme}.css";
        }
    }

    protected async override void OnInitialized()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("Login");
           
        }
        else
        {
            user = await _localStorage.GetItemAsync<UserToken>("User");
            StateHasChanged();
            await LoadMenu(new TopicsRequest());
        }
       
    }

    protected async System.Threading.Tasks.Task SidebarToggle0Click(dynamic args)
    {
        await InvokeAsync(() => { sidebar0.Toggle(); });

        await InvokeAsync(() => { body0.Toggle(); });
    }

    async Task OnSearchTextChanged(ChangeEventArgs args)
    {
        TopicsRequest filter = new TopicsRequest();
        filter.Search = args.Value.ToString();

        await LoadMenu(filter);
    }

    async Task LoadMenu(TopicsRequest args)
    {
        args.Page = 1;
        args.Size = 10;
        args.Sort = "";
        args.Direction = 1;

        var TopicResult = await _topicsService.GetListTopics(args);
        if (TopicResult.IsSuccess)
        {
            List<MenuItem> menuItems = new List<MenuItem>();

            TopicResult.Data.Content.ForEach(x =>
            {
                menuItems.Add(new MenuItem { Icon = "star_rate", Path = $"/{x.Id.ToString()}", Text = x.Name });
            });
            menuItems.Add(new MenuItem { Icon = "home", Path = "/", Text = "Todos" });
            filteredMenuItems = menuItems;
        }

        StateHasChanged();
    }

}